import{_ as s,o as a,c as n,V as l}from"./chunks/framework.e9646d2c.js";const C=JSON.parse('{"title":"关于定时器的一些知识","description":"","frontmatter":{"title":"关于定时器的一些知识","date":"2021-12-29T00:00:00.000Z","tags":["随笔","javascript"],"categories":["javascript"]},"headers":[],"relativePath":"blogs/informal-essay/timer.md","lastUpdated":1681975036000}'),o={name:"blogs/informal-essay/timer.md"},e=l(`<h2 id="_1-window-settimeout" tabindex="-1">1.window.setTimeout <a class="header-anchor" href="#_1-window-settimeout" aria-label="Permalink to &quot;1.window.setTimeout&quot;">​</a></h2><p>**<code>setTimeout()</code>**方法设置一个定时器，该定时器在定时器到期后执行一个函数或指定的一段代码。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> timeoutID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;">[, </span><span style="color:#82AAFF;">delay</span><span style="color:#A6ACCD;">, </span><span style="color:#82AAFF;">arg1</span><span style="color:#A6ACCD;">, </span><span style="color:#82AAFF;">arg2</span><span style="color:#A6ACCD;">, ...]);</span></span>
<span class="line"><span style="color:#A6ACCD;">var timeoutID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;">[, </span><span style="color:#82AAFF;">delay</span><span style="color:#A6ACCD;">]);</span></span>
<span class="line"><span style="color:#A6ACCD;">var timeoutID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(code[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> delay]);</span></span></code></pre></div><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><p><code>function</code></p><p><code>function</code>是你想要在到期时间(<code>delay</code>毫秒)之后执行的函数。</p></li><li><p><code>code</code></p><p>这是一个可选语法，你可以使用字符串而不是<code>function</code>，在<code>delay</code>毫秒之后编译和执行字符串 (使用该语法是<strong>不推荐的,</strong> 原因和使用 <code>eval()</code>一样，有安全风险)。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 示例</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> timer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">console.log(&quot;定时器&quot;)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4000</span><span style="color:#A6ACCD;">)</span></span></code></pre></div></li><li><p><code>delay</code> 可选</p><p>延迟的毫秒数 (一秒等于1000毫秒)，函数的调用会在该延迟之后发生。如果省略该参数，delay取默认值0，意味着“马上”执行，或者尽快执行。不管是哪种情况，实际的延迟时间可能会比期待的(delay毫秒数) 值长。</p></li><li><p><code>arg1, ..., argN</code> 可选</p><p>附加参数，一旦定时器到期，它们会作为参数传递给<code>function</code></p><p><strong>备注</strong>：需要注意的是，IE9 及更早的 IE 浏览器不支持向回调函数传递额外参数(第一种语法)</p></li></ul><h4 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h4><p>返回值<code>timeoutID</code>是一个正整数，表示定时器的编号。这个值可以传递给<code>clearTimeout()</code>来取消该定时器。</p><p>需要注意的是<code>setTimeout()</code>和<code>setInterval()</code>共用一个编号池，技术上，<code>clearTimeout()</code>和 <code>clearInterval()</code> 可以互换。但是，为了避免混淆，不要混用取消定时函数。</p><p>在同一个对象上（一个window或者worker），<code>setTimeout()</code>或者<code>setInterval()</code>在后续的调用不会重用同一个定时器编号。但是不同的对象使用独立的编号池。</p><h2 id="_2-window-setinterval" tabindex="-1">2.window.setInterval <a class="header-anchor" href="#_2-window-setinterval" aria-label="Permalink to &quot;2.window.setInterval&quot;">​</a></h2><p><strong><code>setInterval()</code></strong> 方法重复调用一个函数或执行一个代码段，在每次调用之间具有固定的时间延迟。</p><p>**setInterval()<strong>方法重复调用函数或执行代码片段，每次调用之间有固定的时间延迟。它返回一个时间间隔ID，该ID唯一地标识时间间隔，因此您可以稍后通过调用</strong>clearInterval()**来删除它。</p><h3 id="语法-1" tabindex="-1">语法 <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> intervalID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(func</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> delay</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arg2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> intervalID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(code</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> delay)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><p><code>func</code></p><p>要重复调用的函数。 每经过指定 <code>延迟</code> 毫秒后执行的<code>函数</code> 。</p></li><li><p><code>code</code></p><p>这个语法是可选的，你可以传递一个字符串来代替一个函数对象，你传递的字符串会被编译然后每个delay毫秒时间内执行一次。这个语法因为存在安全风险所以不被推荐使用。</p></li><li><p><code>delay</code></p><p>是每次延迟的毫秒数 (一秒等于1000毫秒)，函数的每次调用会在该延迟之后发生。和setTimeout一样，实际的延迟时间可能会稍长一点。这个时间计算单位是毫秒（千分之一秒），这个定时器会使指定方法或者代码段执行的时候进行时间延迟。如果这个参数值小于10，则默认使用值为10。</p></li><li><p><code>arg1, ..., argN</code> 可选</p><p>当定时器过期的时候，将被传递给func指定函数的附加参数。</p></li></ul><h4 id="返回值-1" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-1" aria-label="Permalink to &quot;返回值&quot;">​</a></h4><p>此返回值<code>intervalID</code>是一个非零数值，用来标识通过<code>setInterval()</code>创建的计时器，这个值可以用来作为<code>clearInterval()</code>的参数来清除对应的计时器 。</p><p>值得注意的是，<code>setInterval()</code>和<code>setTimeout()</code>共享同一个ID池，并且<code>clearInterval()</code>和<code>clearTimeout()</code>在技术上是可互换使用的。但是，我们必须去匹配<code>clearInterval()</code>和<code>clearTimeout()</code>对应的<code>id，以</code>避免代码杂乱无章，增强代码的可维护性。</p><h2 id="_3-实际延时比设定值更久的原因" tabindex="-1">3.实际延时比设定值更久的原因： <a class="header-anchor" href="#_3-实际延时比设定值更久的原因" aria-label="Permalink to &quot;3.实际延时比设定值更久的原因：&quot;">​</a></h2><h3 id="最小延迟时间" tabindex="-1">最小延迟时间 <a class="header-anchor" href="#最小延迟时间" aria-label="Permalink to &quot;最小延迟时间&quot;">​</a></h3><p>在浏览器中，<code>setTimeout()/\`\`setInterval()</code>的每调用一次定时器的最小间隔是4ms，这通常是由于函数嵌套导致（嵌套层级达到一定深度），或者是由于已经执行的setInterval的回调函数阻塞导致的。</p><h3 id="超时延迟" tabindex="-1">超时延迟 <a class="header-anchor" href="#超时延迟" aria-label="Permalink to &quot;超时延迟&quot;">​</a></h3><p>除了&quot;最小延时&quot;之外，定时器仍然有可能因为当前页面（或者操作系统/浏览器本身）被其他任务占用导致延时。 需要被强调是， 直到调用 <code>setTimeout()</code>的主线程执行完其他任务之后，回调函数和代码段才能被执行。</p><h3 id="最大延时值" tabindex="-1">最大延时值 <a class="header-anchor" href="#最大延时值" aria-label="Permalink to &quot;最大延时值&quot;">​</a></h3><p>包括 IE, Chrome, Safari, Firefox 在内的浏览器其内部以32位带符号整数存储延时。这就会导致如果一个延时(delay)大于 2147483647 毫秒 (大约24.8 天)时就会溢出，导致定时器将会被立即执行。</p><h2 id="_4-定时器的可靠性" tabindex="-1">4.定时器的可靠性 <a class="header-anchor" href="#_4-定时器的可靠性" aria-label="Permalink to &quot;4.定时器的可靠性&quot;">​</a></h2><p>虽说定时器在大部分的情况下都是趋于稳定的，但是定时器在使用的时候也存在着一些误差，可以使用下列代码多测试几次，就会发现，每次的结果都会存有差异。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> startTime </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 开始时间</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> frequency </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 执行次数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定时器</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> timer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 执行十次后停止并清除定时器</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">frequency</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">9</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">clearInterval</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 每次定时器执行结束时间</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">endTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setInterval执行的差值时间：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">time2</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">time1</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 没执行一次执行次数自增</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">frequency</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="_5-遇到的关于无法清除定时器的问题" tabindex="-1">5.遇到的关于无法清除定时器的问题 <a class="header-anchor" href="#_5-遇到的关于无法清除定时器的问题" aria-label="Permalink to &quot;5.遇到的关于无法清除定时器的问题&quot;">​</a></h2><h4 id="错误示范" tabindex="-1">错误示范： <a class="header-anchor" href="#错误示范" aria-label="Permalink to &quot;错误示范：&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 定义时间</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个函数，实现倒计时功能</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">countDown</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">--</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">倒计时：</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">秒</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 定义定时器，间隔一秒执行一次该函数</span></span>
<span class="line"><span style="color:#F07178;">　  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">countDown</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 当时间为0的时候清除定时器</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">clearInterval</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 调用倒计时函数</span></span>
<span class="line"><span style="color:#82AAFF;">countDown</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="改变过后的正确示范" tabindex="-1">改变过后的正确示范： <a class="header-anchor" href="#改变过后的正确示范" aria-label="Permalink to &quot;改变过后的正确示范：&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 定义时间</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个函数，实现倒计时功能</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">countDown</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">--</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">倒计时：</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">秒</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 当时间为0的时候清除定时器</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">clearInterval</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义定时器，间隔一秒执行一次该函数</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> timer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(countDown</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p><code>无法清除定时器的原因：在以上函数中，每次调用函数都会创建一个新的定时器，clearInterval()只关闭了其中一个setInterval_id，剩下的setInterval_id还会启动setInterval()。</code></p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://www.cnblogs.com/echolun/p/10765562.html" target="_blank" rel="noreferrer">js的执行机制</a></p><p><a href="https://juejin.cn/post/7041854119027408909" target="_blank" rel="noreferrer">事件循环</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout" target="_blank" rel="noreferrer">MDN定时器</a></p><blockquote><p>博客主要记录一些学习的文章，如有不足，望大家指出，谢谢。</p></blockquote>`,41),p=[e];function t(c,r,y,i,F,D){return a(),n("div",null,p)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
