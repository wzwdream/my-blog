import{_ as s,o as a,c as l,V as n}from"./chunks/framework.0020f959.js";const C=JSON.parse('{"title":"Event-Loop","description":"","frontmatter":{"title":"Event-Loop","date":"2021-11-29T00:00:00.000Z","tags":["javascript"],"categories":["javascript"]},"headers":[],"relativePath":"blogs/javascript/event-loop.md","lastUpdated":1681976325000}'),o={name:"blogs/javascript/event-loop.md"},p=n(`<h2 id="_1、什么是eventloop" tabindex="-1">1、什么是EventLoop？ <a class="header-anchor" href="#_1、什么是eventloop" aria-label="Permalink to &quot;1、什么是EventLoop？&quot;">​</a></h2><ul><li>EvnetLoop是js的运行机制，也就是<code>事件循环</code>，我个人的理解就是<code>为了使单线程的js在执行的时候不发生阻塞</code>。</li><li>EventLoop有两种：<code>浏览器的EventLoop</code>和<code>nodeJs的EventLoop</code>，这篇文章主要记录<code>浏览器的EventLoop</code>的学习。</li></ul><h2 id="_2、学习eventloop前需要知道的一些知识" tabindex="-1">2、学习EventLoop前需要知道的一些知识 <a class="header-anchor" href="#_2、学习eventloop前需要知道的一些知识" aria-label="Permalink to &quot;2、学习EventLoop前需要知道的一些知识&quot;">​</a></h2><ul><li><p><code>同步任务</code>：在主线程上排队执行的任务。只有前一个任务执行完毕，才能执行后一个任务。</p></li><li><p><code>异步任务</code>：不进入主线程、而进入任务队列的任务。只有引擎认为某个异步任务可以执行了(比如 Ajax 操作从服务器得到了结果)，该任务(采用回调函数的形式)才会进入主线程执行。排在异步任务后面的代码，不用等待异步任务结束会马上运行，也就是说，异步任务不具有“堵塞”效应。</p></li><li><p><code>调用栈/执行栈（Stack）</code>：执行栈会将当前的执行上下文(通俗一点可以理解成当前的函数调用)压入到执行栈当中，执行完成后就会把它弹出去。</p></li><li><p><code>任务队列(Queue)</code>：任务队列通俗的讲就是存放异步任务的队列，js的任务队列有两种，<code>宏任务队列（MacroTask queue）</code>跟<code>微任务队列（MicroTask queue）</code></p><blockquote><p><code>宏任务(MacroTask)</code>：<code>script</code>全部代码、<code>setTimeout</code>、<code>setInterval</code>、<code>UI渲染</code>...</p></blockquote><blockquote><p><code>微任务（MicroTask）</code>：<code>Promise</code>、<code>Process.nextTick</code>、<code>Object.observe(废弃)</code>、<code>MutationObserver</code>...</p></blockquote></li></ul><h2 id="_3、eventloop-事件循环-执行过程" tabindex="-1">3、EventLoop（事件循环）执行过程 <a class="header-anchor" href="#_3、eventloop-事件循环-执行过程" aria-label="Permalink to &quot;3、EventLoop（事件循环）执行过程&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9da2fa26db4a42828718f2a345ab257d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ul><li>具体过程可以理解为：</li></ul><blockquote><ul><li>1、主线程执行全局同步代码，该过程可能产生一系列异步任务，这些异步任务分别进入对应的任务队列（<code>宏任务队列（MacroTask queue）</code>跟<code>微任务队列（MicroTask queue）</code>）</li><li>2、同步代码执行完毕，<code>调用栈（Stack）</code>清空</li><li>3、检查是否存在<code>微任务(MicroTask)</code>，如果存在则按顺序执行，直至清空<code>微任务队列(MicroTask Queue)</code>，如果在执行过程中产生了新的<code>微任务（MicroTask）</code>，则把该任务放入队列的队尾，在当前周期执行</li><li>4、<code>微任务（MicroTask）</code>执行完毕，<code>微任务队列（MicroTask queue）</code>为空，<code>调用栈（Stack）</code>清空</li><li>5、取出<code>宏任务队列（MacroTask queue）</code>中位于队首的任务，放入<code>调用栈（Stack）</code>中执行</li><li>6、当前<code>宏任务(MacroTask)</code>执行完毕，<code>调用栈（Stack）</code>清空</li><li>重复3-6步骤...直至<code>宏任务队列（MacroTask queue）</code>中的任务全部执行完毕</li></ul></blockquote><h2 id="_4、概念性的东西都说完了-做几个题目校验一下学习成果" tabindex="-1">4、概念性的东西都说完了，做几个题目校验一下学习成果 <a class="header-anchor" href="#_4、概念性的东西都说完了-做几个题目校验一下学习成果" aria-label="Permalink to &quot;4、概念性的东西都说完了，做几个题目校验一下学习成果&quot;">​</a></h2><h3 id="第一题" tabindex="-1">第一题 <a class="header-anchor" href="#第一题" aria-label="Permalink to &quot;第一题&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">javaScript start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">javaScript end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>这里的结果是什么呢？不妨结合上面简述的知识看一下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">javaScript start</span></span>
<span class="line"><span style="color:#A6ACCD;">promise1</span></span>
<span class="line"><span style="color:#A6ACCD;">javaScript end</span></span>
<span class="line"><span style="color:#A6ACCD;">promise2</span></span>
<span class="line"><span style="color:#A6ACCD;">setTimeout1</span></span>
<span class="line"><span style="color:#A6ACCD;">promise3</span></span>
<span class="line"><span style="color:#A6ACCD;">setTimeout2</span></span>
<span class="line"><span style="color:#A6ACCD;">promise4</span></span></code></pre></div><p>相信这样简单的题目，对于正在看文章的你来说是轻而易举的</p><p>我们来分析一下具体的流程：</p><ul><li>1.执行全局同步代码</li><li><ul><li>顺序执行输出</li></ul></li><li><ul><li>javaScript start</li></ul></li><li><ul><li>promise1</li></ul></li><li><ul><li>javaScript end</li></ul></li><li><ul><li>把promise的回调函数放入微任务队列，等待执行</li></ul></li><li><ul><li>把setTimeout放入宏任务队列，等待执行</li></ul></li><li>2.存在微任务队列，执行微任务</li><li><ul><li>顺序执行微任务输出</li></ul></li><li><ul><li>promise2</li></ul></li><li>3.把宏任务队列的第一个宏任务（即第一个定时器）放入调用栈执行</li><li><ul><li>输出</li></ul></li><li><ul><li>setTimeout1</li></ul></li><li><ul><li>因为当前宏任务没有产生微任务，所以把下一个宏任务（第二个定时器）放入调用栈执行</li></ul></li><li>4.第二个宏任务执行</li><li><ul><li>顺序执行输出</li></ul></li><li><ul><li>promise3</li></ul></li><li><ul><li>setTimeout2</li></ul></li><li><ul><li>把promise的回调放入微任务队列，等待执行</li></ul></li><li><ul><li>执行微任务</li></ul></li><li><ul><li>输出</li></ul></li><li><ul><li>promise4</li></ul></li></ul><h3 id="第二题" tabindex="-1">第二题 <a class="header-anchor" href="#第二题" aria-label="Permalink to &quot;第二题&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">javaScript start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fn1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn1</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fn2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fn2</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">javaScript end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>这里结果又会是什么呢？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">javaScript start</span></span>
<span class="line"><span style="color:#A6ACCD;">promise1</span></span>
<span class="line"><span style="color:#A6ACCD;">javaScript end</span></span>
<span class="line"><span style="color:#A6ACCD;">fn1</span></span>
<span class="line"><span style="color:#A6ACCD;">fn2</span></span>
<span class="line"><span style="color:#A6ACCD;">promise2</span></span>
<span class="line"><span style="color:#A6ACCD;">setTimeout2</span></span>
<span class="line"><span style="color:#A6ACCD;">setTimeout1</span></span></code></pre></div><p>相信大家都答对了，这里的关键在前面已经提过：</p><ul><li><strong>在执行微任务队列中任务的时候，如果又产生了微任务，那么会继续添加到队列的末尾，也会在这个周期执行，直到微任务队列为空。</strong> 还有一个关键点是<code>async/await</code>：\\</li><li><code>async/await</code> 在底层转换成了 <code>promise</code> 和 <code>then</code> 回调函数，是 <code>promise</code> 的语法糖。\\</li><li>在使用 <code>await</code>的时候, 解释器都会先创建一个 <code>promise</code> 对象，然后把剩下的 <code>async</code> 函数中的操作放到 <code>then</code> 回调函数中。</li></ul><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844903670291628046#heading-10" target="_blank" rel="noreferrer">带你彻底弄懂EventLoop</a><a href="https://juejin.cn/post/7008844477314334734#heading-4" target="_blank" rel="noreferrer"># 看完一定懂的 Event Loop</a></p><blockquote><p>博客主要记录一些学习的文章，如有不足，望大家指出，谢谢。</p></blockquote>`,25),e=[p];function c(t,r,y,i,F,D){return a(),l("div",null,e)}const d=s(o,[["render",c]]);export{C as __pageData,d as default};
