import{_ as l,o as n,c as o,V as a,z as s}from"./chunks/framework.0020f959.js";const h=JSON.parse('{"title":"正则表达式的一些知识","description":"","frontmatter":{"title":"正则表达式的一些知识","date":"2022-01-15T00:00:00.000Z","tags":["随笔","javascript"],"categories":["javascript"]},"headers":[],"relativePath":"blogs/informal-essay/regularExpression.md","lastUpdated":1681976015000}'),p={name:"blogs/informal-essay/regularExpression.md"},e=a(`<h2 id="_1、什么是正则表达式" tabindex="-1">1、什么是正则表达式 <a class="header-anchor" href="#_1、什么是正则表达式" aria-label="Permalink to &quot;1、什么是正则表达式&quot;">​</a></h2><p>正则表达式就是专门规定一个字符串中字符出现的规律的一套规则。</p><h2 id="_2、创建正则表达式的2种方法" tabindex="-1">2、创建正则表达式的2种方法 <a class="header-anchor" href="#_2、创建正则表达式的2种方法" aria-label="Permalink to &quot;2、创建正则表达式的2种方法&quot;">​</a></h2><p>1.标准写法：使用new关键字创建 --- var 变量 = new RegExp(&#39;正则表达式&#39;, &#39;ig&#39;); 2.简写：var 变量 = / 正则表达式 / ig;</p><blockquote><p>注意:<br> （1）如果想要在正则表达式使用js的变量或者js函数处理后返回的字符串，则只能使用标准写法创建正则表达式<br> （2）&#39; i &#39;表示忽略大小写，&#39; g &#39;表示匹配所有</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 匹配数组中包含的字符</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">国</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">人</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是中国人，我爱中国!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// var reg = /arr.join(&#39;|&#39;)/g; // 错误的方法</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#A6ACCD;">(arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">|</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">g</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(reg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_3、正则表达式的基本语法" tabindex="-1">3、正则表达式的基本语法 <a class="header-anchor" href="#_3、正则表达式的基本语法" aria-label="Permalink to &quot;3、正则表达式的基本语法&quot;">​</a></h2>`,7),t=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"字符"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"' \\ '"),s("td",null,"转义特殊字符")]),s("tr",null,[s("td",null,"' ^ '"),s("td",null,"匹配字符串的开头")]),s("tr",null,[s("td",null,"' $ '"),s("td",null,"匹配字符串的结尾")]),s("tr",null,[s("td",null,"' * '"),s("td",null,"匹配前面的子表达式零次或多次")]),s("tr",null,[s("td",null,"' + '"),s("td",null,"至少匹配前面的子表达式一次")]),s("tr",null,[s("td",null,"' ? '"),s("td",null,"只能匹配前面的子表达式零次或一次")]),s("tr",null,[s("td",{n:""}),s("td",null,"n是一个非负整数。匹配确定的n次")]),s("tr",null,[s("td",{"n,":""}),s("td",null,"n是一个非负整数。至少匹配n次")]),s("tr",null,[s("td",{"n,m":""}),s("td",null,"m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次")]),s("tr",null,[s("td",null,"."),s("td",null,"匹配除“\\n”之外的任何单个字符")]),s("tr",null,[s("td",null,"' | '"),s("td",null,"表示或")]),s("tr",null,[s("td",null,"\\d"),s("td",null,"匹配一个数字字符")]),s("tr",null,[s("td",null,"\\D"),s("td",null,"匹配一个非数字字符")]),s("tr",null,[s("td",null,"\\f"),s("td",null,"匹配一个换页符")]),s("tr",null,[s("td",null,"\\n"),s("td",null,"匹配一个换行符")]),s("tr",null,[s("td",null,"\\r"),s("td",null,"匹配一个回车符")]),s("tr",null,[s("td",null,"\\s"),s("td",null,"匹配任何空白字符")]),s("tr",null,[s("td",null,"\\S"),s("td",null,"匹配任何非空白字符")]),s("tr",null,[s("td",null,"\\t"),s("td",null,"匹配一个制表符")]),s("tr",null,[s("td",null,"\\v"),s("td",null,"匹配一个垂直制表符")]),s("tr",null,[s("td",null,"\\w"),s("td",null,"匹配包括下划线的任何单词字符")]),s("tr",null,[s("td",null,"\\W"),s("td",null,"匹配任何非单词字符")])])],-1),r=a(`<h2 id="_4、何时使用正则表达式" tabindex="-1">4、何时使用正则表达式 <a class="header-anchor" href="#_4、何时使用正则表达式" aria-label="Permalink to &quot;4、何时使用正则表达式&quot;">​</a></h2><h3 id="_1-验证字符串格式-手机号验证、邮箱验证等。" tabindex="-1">1.验证字符串格式 --- 手机号验证、邮箱验证等。 <a class="header-anchor" href="#_1-验证字符串格式-手机号验证、邮箱验证等。" aria-label="Permalink to &quot;1.验证字符串格式 --- 手机号验证、邮箱验证等。&quot;">​</a></h3><h3 id="_2-查找敏感词-弹幕敏感词等。" tabindex="-1">2.查找敏感词 --- 弹幕敏感词等。 <a class="header-anchor" href="#_2-查找敏感词-弹幕敏感词等。" aria-label="Permalink to &quot;2.查找敏感词 --- 弹幕敏感词等。&quot;">​</a></h3><h5 id="_2-1-验证字符串" tabindex="-1">2.1 验证字符串 <a class="header-anchor" href="#_2-1-验证字符串" aria-label="Permalink to &quot;2.1 验证字符串&quot;">​</a></h5><blockquote><p>以下用reg表示正则表达式</p></blockquote><h5 id="_2-1-1-res-test-字符串" tabindex="-1">2.1.1 res.test(&#39;字符串&#39;); <a class="header-anchor" href="#_2-1-1-res-test-字符串" aria-label="Permalink to &quot;2.1.1 res.test(&#39;字符串&#39;);&quot;">​</a></h5><p>（1）只要字符串格式满足正则表达式的规则就会返回true，否则返回false。 （2）缺点：只要字符串中含有符合规则的内容，正则表达式就会匹配，返回true。 （3）解决：配合&#39; ^ &#39; 和 &#39; $ &#39; 一起使用，表示从头到尾匹配。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 匹配六位数字</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{6}/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc123456</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 返回结果为true</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> reg1 </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{6}</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc123456</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 返回结果为false</span></span></code></pre></div><h5 id="_2-2-查找敏感词" tabindex="-1">2.2 查找敏感词 <a class="header-anchor" href="#_2-2-查找敏感词" aria-label="Permalink to &quot;2.2 查找敏感词&quot;">​</a></h5><blockquote><p>以下reg表示正则表达式</p></blockquote><h4 id="_2-2-1-reg-search-敏感词" tabindex="-1">2.2.1 reg.search(&#39;敏感词&#39;); <a class="header-anchor" href="#_2-2-1-reg-search-敏感词" aria-label="Permalink to &quot;2.2.1 reg.search(&#39;敏感词&#39;);&quot;">​</a></h4><p>查找模式匹配,只要找到第一个匹配然后返回，如果字符串没有匹配，则返回null。</p><h5 id="_2-2-2-reg-match-敏感词" tabindex="-1">2.2.2 reg.match(&#39;敏感词&#39;) <a class="header-anchor" href="#_2-2-2-reg-match-敏感词" aria-label="Permalink to &quot;2.2.2 reg.match(&#39;敏感词&#39;)&quot;">​</a></h5><p>缺点：只能获得敏感词的内容，不能获得敏感词的位置。</p><h5 id="_2-2-3-reg-exec-字符串" tabindex="-1">2.2.3 reg.exec(&#39;字符串&#39;); <a class="header-anchor" href="#_2-2-3-reg-exec-字符串" aria-label="Permalink to &quot;2.2.3 reg.exec(&#39;字符串&#39;);&quot;">​</a></h5><p>缺点：如果只调用一次exec()函数，即使正则表达式后加了&#39; g &#39;，也只会获得第一个敏感词的内容和位置。 解决：如果想要获取所有敏感词的位置和内容，必须反复调用exec，直到找不到，返回null为止。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 示例</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">正则表达式</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">敏感词</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">敏感词的内容：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">敏感词的位置</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;">(result </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h5 id="_2-2-4-reg-findall-敏感词" tabindex="-1">2.2.4 reg.findall(&#39;敏感词&#39;); <a class="header-anchor" href="#_2-2-4-reg-findall-敏感词" aria-label="Permalink to &quot;2.2.4 reg.findall(&#39;敏感词&#39;);&quot;">​</a></h5><p>遍历匹配，可以获取字符串中所有匹配的字符串，返回一个列表。</p><h5 id="_2-3-零宽断言" tabindex="-1">2.3 零宽断言 <a class="header-anchor" href="#_2-3-零宽断言" aria-label="Permalink to &quot;2.3 零宽断言&quot;">​</a></h5><p>给指定位置添加一个限定条件，用来规定此位置之前或之后的字符必须满足限定条件才可以使正则表达式匹配成功。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 示例1：数字三位一逗(千分符)</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1234567890.25</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">)(?=(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{3})+(</span><span style="color:#A6ACCD;">\\.</span><span style="color:#89DDFF;">|</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">))/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(reg</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">$1,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 示例2：使用0宽断言切割url</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:8080/public/index.html?uname=zhongguo&amp;upwd=zhongguo123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">a-z</span><span style="color:#89DDFF;">]+(?:</span><span style="color:#A6ACCD;">\\/\\/</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">(?&lt;=</span><span style="color:#C3E88D;">:</span><span style="color:#A6ACCD;">\\/\\/</span><span style="color:#89DDFF;">)[</span><span style="color:#C3E88D;">a-z0-9. )+(?=:) | (?&lt;=:)\\d+(?=</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">) | </span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">[a-z/.</span><span style="color:#89DDFF;">]+(?=</span><span style="color:#A6ACCD;">\\?</span><span style="color:#89DDFF;">)|(?&lt;=</span><span style="color:#A6ACCD;">\\?</span><span style="color:#89DDFF;">)[</span><span style="color:#C3E88D;">a-z0-9=&amp;</span><span style="color:#89DDFF;">]+(?=</span><span style="color:#C3E88D;">#</span><span style="color:#89DDFF;">)|/</span><span style="color:#F78C6C;">ig</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(reg)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">结果：arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">8080</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/public/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">uname=zhongguo&amp;upwd=zhongguo123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>创建正则表达式有两种方法：new关键字创建跟字面量方法</li><li>验证字符串的方法是test()</li><li>查找字符串的方法有多个：search()、match()、exec()、findall()，每个方法都有自己的优缺点</li><li>零宽断言：主要是在指定的位置添加限制条件，在这个位置之前或之后的字符满足条件才匹配成功</li></ul><blockquote><p>博客主要记录一些学习的文章，如有不足，望大家指出，谢谢。</p></blockquote>`,26),c=[e,t,r];function D(y,F,C,i,A,u){return n(),o("div",null,c)}const g=l(p,[["render",D]]);export{h as __pageData,g as default};
